
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONObject;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



/**
 *
 * @author USER
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        
        start();
    }
    
    ArrayList<String> kotaFavorit = new ArrayList<>();;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        labelCuaca = new javax.swing.JLabel();
        labelIkon = new javax.swing.JLabel();
        textFieldKota = new javax.swing.JTextField();
        comboBoxFavorit = new javax.swing.JComboBox<>();
        buttonCek = new javax.swing.JButton();
        buttonFavorit = new javax.swing.JButton();
        buttonSimpan = new javax.swing.JButton();
        buttonMuat = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableCuaca = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Aplikasi Cek Cuaca Sederhana");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Masukkan Kota");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Pilih Favorit");

        labelCuaca.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelCuaca.setText("Cuaca : ");

        labelIkon.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        labelIkon.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        textFieldKota.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        comboBoxFavorit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        buttonCek.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonCek.setText("Cek Cuaca");

        buttonFavorit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonFavorit.setText("Tambah Favorit");

        buttonSimpan.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonSimpan.setText("Simpan Data");

        buttonMuat.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonMuat.setText("Muat Data");

        tableCuaca.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kota", "Cuaca", "Suhu (Â°C)"
            }
        ));
        jScrollPane1.setViewportView(tableCuaca);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelCuaca, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonSimpan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(20, 20, 20)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(buttonMuat, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelIkon, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboBoxFavorit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldKota, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buttonCek, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonFavorit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textFieldKota, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxFavorit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonCek)
                    .addComponent(buttonFavorit))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelCuaca, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelIkon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonSimpan)
                    .addComponent(buttonMuat))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(76, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void simpanDataCuaca() {
        try (FileWriter writer = new FileWriter("data_cuaca.csv", true)) {
            DefaultTableModel tableModel = (DefaultTableModel) tableCuaca.getModel();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                String city = tableModel.getValueAt(i, 0).toString();
                String weather = tableModel.getValueAt(i, 1).toString();
                String temp = tableModel.getValueAt(i, 2).toString();
                writer.append(city).append(",").append(weather).append(",").append(temp).append("\n");
            }
            JOptionPane.showMessageDialog(this, "Data berhasil disimpan ke CSV");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private void muatDataCuaca() {
        File file = new File("data_cuaca.csv");
    
        try {
            if (!file.exists()) {
                file.createNewFile();
                try (PrintWriter writer = new PrintWriter(new FileWriter(file))) {
                    writer.println("Kota,Cuaca,Suhu (Â°C)");
                }
                JOptionPane.showMessageDialog(this, "File data_cuaca.csv berhasil dibuat.");
            }

            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                DefaultTableModel tableModel = (DefaultTableModel) tableCuaca.getModel();
                String line;
                tableModel.setRowCount(0);
                while ((line = reader.readLine()) != null) {
                    String[] data = line.split(",");
                    tableModel.addRow(data);
                }
                JOptionPane.showMessageDialog(this, "Data berhasil dimuat dari CSV");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private void getCuaca(String city) {
        String apiKey = "042ec8689a1d1dfaba84af0c6e14d088";
        String urlString = "http://api.openweathermap.org/data/2.5/weather?q=" + city + "&appid=" + apiKey + "&units=metric";
        
        try {
            URL url = new URL(urlString);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.connect();
            
            int responseCode = conn.getResponseCode();
            if (responseCode == 200) {
                InputStream inputStream = conn.getInputStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
                StringBuilder stringBuilder = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    stringBuilder.append(line);
                }
                
                JSONObject json = new JSONObject(stringBuilder.toString());
                String weather = json.getJSONArray("weather").getJSONObject(0).getString("main");
                String icon = json.getJSONArray("weather").getJSONObject(0).getString("icon");
                double temp = json.getJSONObject("main").getDouble("temp");
                
                String translatedWeather = terjemahkanCuaca(weather);
                labelCuaca.setText("Cuaca : " + translatedWeather + " (" + temp + "Â°C)");
                
                String iconUrl = "http://openweathermap.org/img/wn/" + icon + "@2x.png";
                ImageIcon iconImage = new ImageIcon(new URL(iconUrl));
                labelIkon.setIcon(iconImage);

                DefaultTableModel tableModel = (DefaultTableModel) tableCuaca.getModel();
                tableModel.addRow(new Object[]{city, translatedWeather, temp});
            } else {
                labelCuaca.setText("Kota tidak ditemukan.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void tambahKotaFavorit() {
        String city = textFieldKota.getText();
        if (!city.isEmpty() && !kotaFavorit.contains(city)) {
            kotaFavorit.add(city);
            comboBoxFavorit.addItem(city);
            JOptionPane.showMessageDialog(this, "Kota " + city + " ditambahkan ke favorit.");
        } else if (kotaFavorit.contains(city)) {
            JOptionPane.showMessageDialog(this, "Kota " + city + " sudah ada di favorit.");
        }
    }
    
    private void simpanFavorit() {
        try (FileWriter writer = new FileWriter("kota_favorit.txt")) {
            for (String city : kotaFavorit) {
                writer.write(city + "\n");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void muatFavorit() {
        File file = new File("kota_favorit.txt");

        try {
            if (!file.exists()) {
                file.createNewFile();
                JOptionPane.showMessageDialog(this, "File kota_favorit.txt berhasil dibuat.");
            }

            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String line;
                kotaFavorit.clear();
                comboBoxFavorit.removeAllItems();
                while ((line = reader.readLine()) != null) {
                    kotaFavorit.add(line);
                    comboBoxFavorit.addItem(line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String terjemahkanCuaca(String weather) {
        switch (weather.toLowerCase()) {
            case "clear":
                return "Cerah";
            case "clouds":
                return "Berawan";
            case "rain":
                return "Hujan";
            case "snow":
                return "Salju";
            case "thunderstorm":
                return "Badai Petir";
            case "drizzle":
                return "Gerimis";
            case "mist":
                return "Kabut";
            default:
                return weather;
        }
    }
    
    private void start() {
        muatFavorit();
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            simpanFavorit();
        }));
        
        buttonCek.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String textField = textFieldKota.getText();
                String comboBox = (String) comboBoxFavorit.getSelectedItem();
                String city;
                if (textField.isEmpty()) {
                    if (!comboBox.isEmpty()) {
                      city = comboBox;  
                    } else {
                      city = "null";
                    }
                } else {
                  city = textField;
                }
                if (city.equals("null")) {
                    JOptionPane.showMessageDialog(null, "Kota harus terisi!");
                } else {
                    getCuaca(city);
                }
            }
        });
        
        buttonFavorit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tambahKotaFavorit();
            }
        });
        
        buttonSimpan.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                simpanDataCuaca();
            }
        });
        
        buttonMuat.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                muatDataCuaca();
            }
        });
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCek;
    private javax.swing.JButton buttonFavorit;
    private javax.swing.JButton buttonMuat;
    private javax.swing.JButton buttonSimpan;
    private javax.swing.JComboBox<String> comboBoxFavorit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelCuaca;
    private javax.swing.JLabel labelIkon;
    private javax.swing.JTable tableCuaca;
    private javax.swing.JTextField textFieldKota;
    // End of variables declaration//GEN-END:variables
}

//042ec8689a1d1dfaba84af0c6e14d088